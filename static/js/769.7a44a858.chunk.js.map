{"version":3,"file":"static/js/769.7a44a858.chunk.js","mappings":"oxiBAGaA,GAAWC,GAAAA,GAAAA,GAAH,mlBA6BRC,GAAWD,GAAAA,GAAAA,IAAH,8GAQRE,GAAsBF,GAAAA,GAAAA,IAAH,sFAMnBG,GAAiBH,GAAAA,GAAAA,IAAH,wRAWdI,GAAaJ,GAAAA,GAAAA,IAAH,8OAOIK,IAMdC,GAAYN,GAAAA,GAAAA,IAAH,mHAQTO,GAAaP,GAAAA,GAAAA,EAAH,iDAIVQ,GAAgBR,GAAAA,GAAAA,EAAH,iDAIbS,GAAWT,GAAAA,GAAAA,OAAH,ijBAyBRU,IAAkBV,EAAAA,GAAAA,IAAOS,GAAPT,CAAH,2G,0FCpC5B,GApDsB,SAAC,GAAc,IAAZW,EAAW,EAAXA,KACfC,EAAyCD,EAAzCC,OAAQC,EAAiCF,EAAjCE,OAAQC,EAAyBH,EAAzBG,UAAWC,EAAcJ,EAAdI,UAC7BC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,GAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,GAAAA,IAE1B,OACE,kCACGJ,IAAcG,IAAS,UAACE,GAAA,EAAD,KACxB,WAACxB,GAAD,YACE,UAACE,GAAD,CAAUuB,I,4pDACV,UAACtB,GAAD,CAAqBsB,IAAKC,MAC1B,UAACtB,GAAD,KACA,UAACC,GAAD,WACE,UAACE,GAAD,CAAWkB,IAAKZ,EAAQc,IAAI,kBAE9B,WAACnB,GAAD,WAAaM,EAAO,cACpB,WAACL,GAAD,WACGmB,QAAQb,EAAY,KAAMc,QAAQ,IAAIC,QAAQ,IAAK,KAAK,gBAGzDd,GAQA,UAACL,GAAD,CACEoB,KAAK,SACLC,QAAS,kBAAMf,GAASgB,EAAAA,GAAAA,IAAgB,CAAErB,KAAAA,EAAMsB,OAAQ,IAA/C,EAFX,SAGC,eAVD,UAACxB,GAAD,CACEqB,KAAK,SACLC,QAAS,kBAAMf,GAASgB,EAAAA,GAAAA,IAAgB,CAAErB,KAAAA,EAAMsB,MAAO,IAA9C,EAFX,SAGC,eAaL,UAAC,EAAD,CAAgBC,UAAW,IAAMC,MAAM,WAG5C,EC9DYC,GAAkBpC,GAAAA,GAAAA,GAAH,sMCe5B,GAXkB,WAChB,IAAMqC,GAAQlB,EAAAA,EAAAA,IAAYmB,GAAAA,IAC1B,OACE,UAACF,GAAD,UACGC,EAAME,KAAI,SAAA5B,GAAI,OACb,UAAC,GAAD,CAA6BA,KAAMA,GAAfA,EAAK6B,GADZ,KAKpB,E,sBC6BD,GA/Be,WACb,IAAMxB,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,GAAAA,IACxBC,GAAQF,EAAAA,EAAAA,IAAYG,GAAAA,IACpBe,GAAQlB,EAAAA,EAAAA,IAAYsB,GAAAA,IAC1B,GAAoCC,EAAAA,EAAAA,UAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACR7B,GAAS8B,EAAAA,GAAAA,GAAgBC,GAAAA,EAAAA,MAErB/B,EADW,IAAf2B,GACaK,EAAAA,GAAAA,OACAC,EAAAA,GAAAA,IAAcN,GAC5B,GAAE,CAAC3B,EAAU2B,KAGZ,kCACGzB,IAAcG,IAAS,UAACE,GAAA,EAAD,KACxB,UAAC,GAAD,IACkB,KAAjBc,EAAMa,SACL,UAACzC,GAAD,CACEqB,KAAK,SACLC,QAAS,kBAAMa,GAAc,SAAAO,GAAS,OAAIA,EAAY,CAAhB,GAA7B,EAFX,SAGC,eAIH,UAAC,EAAD,CAAgBjB,UAAW,IAAMC,MAAM,WAG5C,C","sources":["components/TweetListItem/TweetListItem.styled.jsx","components/TweetListItem/TweetListItem.jsx","components/TweetList/TweetList.styled.jsx","components/TweetList/TweetList.jsx","pages/Tweets/Tweets.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport ellipse from '../../images/ellipse.png';\n\nexport const UserCard = styled.li`\n  position: relative;\n  width: 380px;\n  height: 460px;\n  color: #ebd8ff;\n  text-transform: uppercase;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.2;\n  text-align: center;\n  text-transform: uppercase;\n  background: linear-gradient(\n    114.99deg,\n    #471ca9 -0.99%,\n    #5736a3 54.28%,\n    #4b2a99 78.99%\n  );\n  box-shadow: -2.5777px 6.87386px 20.6216px rgba(0, 0, 0, 0.23);\n  border-radius: 20px;\n\n  flex-basis: calc((100% / 3 - 70px));\n  margin-left: 70px;\n  margin-top: 70px;\n\n  &:not(:last-child) {\n    margin-bottom: 24px;\n  }\n`;\n\nexport const UserLogo = styled.img`\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  width: 76px;\n  height: auto;\n`;\n\nexport const UserBackgroundImage = styled.img`\n  width: 308px;\n  height: auto;\n  margin: 28px auto 88px;\n`;\n\nexport const HorizontalLine = styled.div`\n  position: absolute;\n  top: 214px;\n  left: 0;\n  width: 100%;\n  height: 8px;\n  background-color: #ebd8ff;\n  box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.06),\n    inset 0px -1.71846px 3.43693px #ae7be3, inset 0px 3.43693px 2.5777px #fbf8ff;\n`;\n\nexport const UserAvatar = styled.div`\n  position: absolute;\n  width: 80px;\n  height: 80px;\n  top: 178px;\n  left: 150px;\n\n  background-image: url('${ellipse}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n`;\n\nexport const UserImage = styled.img`\n  position: absolute;\n  top: 7px;\n  left: 12px;\n  width: 57px;\n  border-radius: 50%;\n`;\n\nexport const UserTweets = styled.p`\n  margin-bottom: 16px;\n`;\n\nexport const UserFollowers = styled.p`\n  margin-bottom: 26px;\n`;\n\nexport const UsertBtn = styled.button`\n  margin: 0 auto;\n  width: 196px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #373737;\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 1.22;\n  font-family: inherit;\n  cursor: pointer;\n  border: none;\n  background-color: #ebd8ff;\n  box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.25);\n  border-radius: 10.3108px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: #e7e7e7;\n  }\n`;\n\nexport const UserUnfollowBtn = styled(UsertBtn)`\n  background-color: #5cd3a8;\n\n  &:hover {\n    background-color: #b8ecec;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { selectIsLoading, selectError } from 'redux/selectors';\n\nimport {\n  UserCard,\n  HorizontalLine,\n  UserAvatar,\n  UserImage,\n  UserBackgroundImage,\n  UserTweets,\n  UserFollowers,\n  UsertBtn,\n  UserLogo,\n  UserUnfollowBtn,\n} from './TweetListItem.styled';\nimport backgroundImage from '../../images/background.png';\nimport logo from '../../images/logo.png';\nimport Loader from 'components/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleFollowing } from 'redux/operations';\n\nconst TweetListItem = ({ user }) => {\n  const { avatar, tweets, followers, following } = user;\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      {isLoading && !error && <Loader />}\n      <UserCard>\n        <UserLogo src={logo}></UserLogo>\n        <UserBackgroundImage src={backgroundImage} />\n        <HorizontalLine />\n        <UserAvatar>\n          <UserImage src={avatar} alt=\"User image\" />\n        </UserAvatar>\n        <UserTweets>{tweets} tweets</UserTweets>\n        <UserFollowers>\n          {String((followers / 1000).toFixed(3)).replace('.', ',')} followers\n        </UserFollowers>\n\n        {!following ? (\n          <UsertBtn\n            type=\"button\"\n            onClick={() => dispatch(toggleFollowing({ user, value: 1 }))}\n          >\n            follow\n          </UsertBtn>\n        ) : (\n          <UserUnfollowBtn\n            type=\"button\"\n            onClick={() => dispatch(toggleFollowing({ user, value: -1 }))}\n          >\n            following\n          </UserUnfollowBtn>\n        )}\n      </UserCard>\n\n      <ToastContainer autoClose={2000} theme=\"dark\" />\n    </>\n  );\n};\n\nTweetListItem.propTypes = {\n  user: PropTypes.shape({\n    tweets: PropTypes.number.isRequired,\n    avatar: PropTypes.string.isRequired,\n    followers: PropTypes.number.isRequired,\n    following: PropTypes.bool.isRequired,\n  }),\n};\n\nexport default TweetListItem;\n","import styled from 'styled-components';\n\nexport const StyledTweetList = styled.ul`\n  font-weight: 700;\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: auto;\n  margin-bottom: 60px;\n\n  margin-left: calc(-1 * 70px);\n  margin-top: calc(-1 * 70px);\n`;\n","import TweetListItem from 'components/TweetListItem';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleUsers } from 'redux/selectors';\n\nimport { StyledTweetList } from './TweetList.styled';\n\nconst TweetList = () => {\n  const users = useSelector(selectVisibleUsers);\n  return (\n    <StyledTweetList>\n      {users.map(user => (\n        <TweetListItem key={user.id} user={user}></TweetListItem>\n      ))}\n    </StyledTweetList>\n  );\n};\n\nexport default TweetList;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport TweetList from 'components/TweetList';\nimport { UsertBtn } from 'components/TweetListItem/TweetListItem.styled';\nimport Loader from 'components/Loader';\nimport { selectError, selectIsLoading, selectUsers } from 'redux/selectors';\nimport { fetchUsers, fetchNewUsers } from 'redux/operations';\nimport { statusFilters } from 'redux/constants';\nimport { setStatusFilter } from 'redux/filtersSlice';\n\nconst Tweets = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const users = useSelector(selectUsers);\n  const [pageNumber, setPageNumber] = useState(1);\n\n  useEffect(() => {\n    dispatch(setStatusFilter(statusFilters.all));\n    pageNumber === 1\n      ? dispatch(fetchUsers())\n      : dispatch(fetchNewUsers(pageNumber));\n  }, [dispatch, pageNumber]);\n\n  return (\n    <>\n      {isLoading && !error && <Loader />}\n      <TweetList />\n      {users.length !== 15 && (\n        <UsertBtn\n          type=\"button\"\n          onClick={() => setPageNumber(prevValue => prevValue + 1)}\n        >\n          Load more\n        </UsertBtn>\n      )}\n      <ToastContainer autoClose={2000} theme=\"dark\"></ToastContainer>\n    </>\n  );\n};\n\nexport default Tweets;\n"],"names":["UserCard","styled","UserLogo","UserBackgroundImage","HorizontalLine","UserAvatar","ellipse","UserImage","UserTweets","UserFollowers","UsertBtn","UserUnfollowBtn","user","avatar","tweets","followers","following","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","error","selectError","Loader","src","backgroundImage","alt","String","toFixed","replace","type","onClick","toggleFollowing","value","autoClose","theme","StyledTweetList","users","selectVisibleUsers","map","id","selectUsers","useState","pageNumber","setPageNumber","useEffect","setStatusFilter","statusFilters","fetchUsers","fetchNewUsers","length","prevValue"],"sourceRoot":""}